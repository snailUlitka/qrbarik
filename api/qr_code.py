import ast

inputInformation = "!Kapibara !!! 0_0  !Kapibara !!! 0_0 !Kapibara !!! 0_0" 
result = []
result = ''.join(format(ord(x), '08b') for x in inputInformation)
lenData = len(result)
lendataBit = []
lendataBit.append(str(bin(lenData)[2:]))

lenDataBin = lenData/8
print("строка в двоичном коде:")
print(result)
print("Длина строки")
print(lenData)
print("длина строки в двоичном коде:")
print(lendataBit)

Table2M_Maxi_amount_information = {
    '1':128, '2':224, '3':352, '4':512, '5':688, 
    '6':864, '7':992, '8':1232, '9':1456, '10':1728,
    '11':2032, '12':2320, '13':2672, '14':2920, '15':3320, 
    '16':3624, '17':4056, '18':4504, '19':5016, '20':5352,
    '21':5712, '22':6256, '23':6880, '24':7312, '25':800, 
    '26':8496, '27':9024, '28':9544, '29':10136, '30': 10984,
    '31':11640, '32':12328, '33':13048, '34':13800, '35':14496,
    '36':15312, '37':15936, '38': 16816, '39':17728, '40':18672
}

def numberVersion(lenBit):
    i = 1   
    while i < len(Table2M_Maxi_amount_information ):
        if(lenBit > int(Table2M_Maxi_amount_information [str(i)])):
            i = i+1
        else:
            return i
VERSION_NUMBER = numberVersion(lenData)    
print('версия')
print(numberVersion(lenData))
'''
ver  = numberVersion(lenData)
'''

Table3_Length_data_quantity_field = {
    '1-9':8, '10-26':16, '27-40':16
}
 
def lenField(version):
    if version <= 9:
        return Table3_Length_data_quantity_field ['1-9']
    elif 10 <= version <= 26:
        return Table3_Length_data_quantity_field ['10-26']
    else:
        return Table3_Length_data_quantity_field ['27-40']
print("длина поля")
print(lenField(VERSION_NUMBER))

res = []
res = '0'+'1'+'0'+'0'+lendataBit[0] + result
print("Результат после указание типа кодирование и длины входной строкии")
print(res)

Table4M_Number_of_blocks = {
    '1':1, '2':1, '3':1, '4':2, '5':2, 
    '6':4, '7':4, '8':4, '9':5, '10':5, 
    '11':5, '12':8, '13':9, '14':9, '15':10, 
    '16':10, '17':11, '18':13, '19':14, '20':16,
    '21': 17, '22':17, '23':18, '24':20, '25':21, 
    '26':23, '27':25, '28':26, '29':28, '30':29, 
    '31':31, '32':33, '33':35, '34':37, '35':38, 
    '36':40, '37':43, '38':45, '39':47, '40':49
}

def filling(bitSequence: str):
    while (len(bitSequence)) %8 != 0:
        bitSequence= bitSequence+'0'
    print(bitSequence)
    counter = 1
    while len(bitSequence) != Table2M_Maxi_amount_information[str(VERSION_NUMBER)]:
        if counter%2 != 0:
           bitSequence= bitSequence +'11101100'
        else:
            bitSequence = bitSequence + '00010001'
        counter +=1
    return bitSequence

res = filling(res)
print("Результат после заполнения")
print(res)
print("Длина после заполнения")
print(len(res))

NUMBER_BLOCK = Table4M_Number_of_blocks[str(VERSION_NUMBER)]
print("кол-во блоков")
print(NUMBER_BLOCK)

amountDataInBlock =  (len(res)/8)//NUMBER_BLOCK
print("кол-во данных в блоке")
print(amountDataInBlock)

remainder = (len(res)/8)%NUMBER_BLOCK
print("Остаток")
print(remainder)

bloks = []
q = 0
j = amountDataInBlock*8
for i in range(0,int(NUMBER_BLOCK-remainder)):
    bloks.append(res[int(q):int(j)])
    q = amountDataInBlock*8
    j = j + amountDataInBlock*8

if remainder!=0:
    q = amountDataInBlock*8 +8
    for i in range(0,int(remainder)):
        bloks.append(res[int(j):int(q)])
        j = amountDataInBlock*8+8
        q = q+amountDataInBlock*8+8

for i in range(len(bloks)):
    print(bloks[i])


print(res)

print('Длинна первого блока')
print(len(bloks[0]))

Table5M_Number_CorrectionBytes_per_block = {
    '1':10, '2':16, '3':26, '4':18, '5':24, 
    '6':16, '7':18, '8':22, '9':22, '10':26, 
    '11':30, '12':22, '13':22, '14':24, '15':24, 
    '16':28, '17':28, '18':26, '19':26, '20':26,
    '21': 26, '22':28, '23':28, '24':28, '25':28, 
    '26':28, '27':28, '28':28, '29':28, '30':28, 
    '31':28, '32':28, '33':28, '34':28, '35':28, 
    '36':28, '37':28, '38':28, '39':28, '40':28
}

Table6_Generating_polynomials={
    '10':{251, 67, 46, 61, 118, 70, 64, 94, 32, 45},
    '16':{120, 104, 107, 109, 102, 161, 76, 3, 91, 191,
          147, 169, 182, 194, 225, 120},
    '18':{215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 
          152, 148, 252, 179, 5, 98, 96, 153},
    '22':{210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 
          200, 74, 8, 172, 98, 80, 219, 134, 160, 105, 165, 231},
    '24':{229, 121, 135, 48, 211, 117, 251, 126, 159, 
          180, 169, 152, 192, 226, 228, 218, 111, 0, 117, 232, 87, 96, 227, 21},
    '26':{173, 125, 158, 2, 103, 182, 118, 17, 145, 201,
           111, 28, 165, 53, 161, 21, 245, 142, 13, 102, 48, 227, 153, 145, 218, 70},
    '28':{168, 223, 200, 104, 224, 234, 108, 180, 110, 190,
           195, 147, 205, 27, 232, 201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123},
    '30':{41, 173, 145, 152, 216, 31, 179, 182, 50, 48, 110,
           86, 239, 96, 222, 125, 42, 173, 226, 193, 224, 130, 156, 37, 251, 216, 238, 40, 192, 180}
}


'''
polynomial = Table6_Generating_polynomials[str(Table5M_Number_CorrectionBytes_per_block[str(VERSION_NUMBER)])]
'''


def bloks_translation_from_2_to_10(bloks: list):
    resultBloks = list()
    for i in range(len(bloks)):
        resultBloks.append([])
    for i in range(len(bloks)):
         q = 0
         j = 0
         while j<len(bloks[i]):
             j = q+8
             resultBloks[i].append(str((int(bloks[i][q:j],2))))
             q = j
    
    return resultBloks

bloks = bloks_translation_from_2_to_10(bloks)

print("Блоки в 10тичной системе")
for i in range(len(bloks)):
    print(bloks[i]) 

print("Длина первого блока:" + str(len(bloks[0])))
print("Длина второго блока:" + str(len(bloks[1])))


Table8_Inverse_Galois_field={
'0': {'-'}, '1': {0}, '2': {1}, '3': {25}, '4': {2}, '5': {50}, '6': {26}, '7': {198}, '8': {3}, '9': {223}, '10': {51}, 
'11': {238}, '12': {27}, '13': {104}, '14': {199}, '15': {75}, '16': {4}, '17': {100}, '18': {224}, '19': {14}, '20': {52}, 
'21': {141}, '22': {239}, '23': {129}, '24': {28}, '25': {193}, '26': {105}, '27': {248}, '28': {200}, '29': {8}, '30': {76}, 
'31': {113}, '32': {5}, '33': {138}, '34': {101}, '35': {47}, '36': {225}, '37': {36}, '38': {15}, '39': {33}, '40': {53}, 
'41': {147}, '42': {142}, '43': {218}, '44': {240}, '45': {18}, '46': {130}, '47': {69}, '48': {29}, '49': {181}, '50': {194}, 
'51': {125}, '52': {106}, '53': {39}, '54': {249}, '55': {185}, '56': {201}, '57': {154}, '58': {9}, '59': {120}, '60': {77}, 
'61': {228}, '62': {114}, '63': {166}, '64': {6}, '65': {191}, '66': {139}, '67': {98}, '68': {102}, '69': {221}, '70': {48}, 
'71': {253}, '72': {226}, '73': {152}, '74': {37}, '75': {179}, '76': {16}, '77': {145}, '78': {34}, '79': {136}, '80': {54}, 
'81': {208}, '82': {148}, '83': {206}, '84': {143}, '85': {150}, '86': {219}, '87': {189}, '88': {241}, '89': {210}, '90': {19}, 
'91': {92}, '92': {131}, '93': {56}, '94': {70}, '95': {64}, '96': {30}, '97': {66}, '98': {182}, '99': {163}, '100': {195},
'101': {72}, '102': {126}, '103': {110}, '104': {107}, '105': {58}, '106': {40}, '107': {84}, '108': {250}, '109': {133}, '110': {186},
'111': {61}, '112': {202}, '113': {94}, '114': {15}, '115': {159}, '116': {10}, '117': {21}, '118': {121}, '119': {43}, '120': {78}, 
'121': {212}, '122': {229}, '123': {172}, '124': {115}, '125': {243}, '126': {167}, '127': {87}, '128': {7}, '129': {112}, '130': {192}, 
'131': {247}, '132': {140}, '133': {128}, '134': {99}, '135': {13}, '136': {103}, '137': {74}, '138':{222},'139' :{237},'140' :{49},
'141' :{197},'142' :{254},'143' :{24},'144' :{227},'145' :{165},'146' :{153},'147' :{119},'148' :{38},'149' :{184},'150' :{180},
'151' :{124},'152' :{17},'153' :{68},'154' :{146},'155' :{217},'156' :{35},'157' :{32},'158' :{137},'159' :{46},'160' :{55},
'161' :{63},'162' :{209},'163' :{91},'164' :{149},'165' :{188},'166' :{207},'167' :{205},'168' :{144},'169' :{135},'170' :{151},
'171' :{178},'172' :{220},'173' :{252},'174' :{190},'175' :{97},'176' :{242},'177' :{86},'178' :{211},'179' :{171},'180' :{20},
'181' :{42},'182' :{93},'183' :{158},'184' :{132},'185' :{60},'186' :{57},'187' :{83},'188' :{71},'189' :{109},'190' :{65},
'191' :{162},'192' :{31},'193' :{45},'194' :{67},'195' :{216},'196' :{183},'197' :{123},'198' :{164},'199' :{118},'200 ': {196} ,
'201 ': {23} ,'202 ': {73} ,'203 ': {236} ,'204 ': {127} ,'205 ': {12} ,'206 ': {111} ,'207 ': {246} ,'208 ': {108} ,'209 ': {161} ,'210 ': {59} ,
'211 ': {82} ,'212 ': {41} ,'213 ': {157} ,'214 ': {85} ,'215 ': {170} ,'216 ': {251} ,'217 ': {96} ,'218 ': {134} ,'219 ': {177} ,'220 ': {187} ,
'221 ': {204} ,'222 ': {62} ,'223 ': {90} ,'224 ': {203} ,'225 ': {89} ,'226 ': {95} ,'227 ': {176} ,'228 ': {156} ,'229 ': {169} ,'230 ': {160} ,
'231 ': {81} ,'232 ': {11} ,'233 ': {245} ,'234 ': {22} ,'235 ': {235} ,'236 ': {122} ,'237 ': {117} ,'238 ': {44} ,'239 ': {215} ,'240 ': {79} ,
'241 ': {174} ,'242 ': {213} ,'243 ': {233} ,'244 ': {230} ,'245 ': {231} ,'246 ': {173} ,'247 ': {232} ,'248 ': {116} ,'249 ': {214} , '250': {244} , 
'251': {234} , '252': {168} , '253': {80} , '254': {88} , '255': {175}
}
def create_Bin_correction(bloks: list):

    numberBinCorrection = Table5M_Number_CorrectionBytes_per_block[str(VERSION_NUMBER)]
    polynomial = Table6_Generating_polynomials[str(Table5M_Number_CorrectionBytes_per_block[str(VERSION_NUMBER)])]

    for i in range(len(bloks)):
        
        listCorrection = [None]*max(len(bloks[i],numberBinCorrection))

        if(len(bloks) >= numberBinCorrection):
             for j in range(len(bloks[i][j])):
                 listCorrection[j] = bloks[i][j]
        else:
            index
            for j in range(len(bloks[i][j])):
                 listCorrection[j] = bloks[i][j]
                 index = j
            for j in range(index,len(listCorrection)):
                listCorrection[j] = '0'
        while q < len(listCorrection):
            a = listCorrection[q]
            listCorrection.pop(q)
            ''' 
            if(a!=0): 
            '''







